{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/avinash/Desktop/Projects/TheStore/frontend/components/SignUp.js\";\nimport Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Error from './ErrorMessage';\nconst SIGNIN_MUTATION = gql`\n    mutation SIGNIN_MUTATION($email:String!, $password:String!){\n        authenticateUserWithPassword(email: $email, password:$password)\n        {\n            ... on UserAuthenticationWithPasswordSuccess {\n            item { \n                id\n                email\n                name\n                }\n            }\n            ... on UserAuthenticationWithPasswordFailure {\n                code\n                message\n            } \n        }\n    }\n`;\nexport default function SignUp() {\n  const {\n    inputs,\n    handleChange,\n    resetForm\n  } = useForm({\n    email: '',\n    name: '',\n    password: ''\n  });\n  const [signin, {\n    data,\n    loading\n  }] = useMutation(SIGNIN_MUTATION, {\n    variables: inputs,\n    //Refetch the current logged in user\n    //Using this the navigation changed instantly\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n\n  async function handleSubmit(e) {\n    e.preventDefault(); //Stop the form from submitting\n\n    const res = await signin();\n    console.log(res);\n    resetForm(); //Send the email and password to the graphQL API\n  }\n\n  const error = (data === null || data === void 0 ? void 0 : data.authenticateUserWithPassword.__typename) == 'UserAuthenticationWithPasswordFailure' ? data === null || data === void 0 ? void 0 : data.authenticateUserWithPassword : undefined; //error = response  which is data?.authenticateUserWithPassword but only when __typename == 'UserAuthenticationWithPasswordFailure' then we return \n  //data?.authenticateUserWithPassword which is the error\n  //The password is submitted over the network to your server in clear text but then what happens is the server hashes it compares it to what it has in file for its own hash\n  //COncern - We are sending our password in clear text  and \n  // ANd than that's why we use HTTPS    \n  // WHat HTTPS does is makes the packets encrypted\n  //Client \n  //--\n  //packets go through \n  //your   wifi router isp  or government\n  //--\n  //Server\n  //method POST also does't let the url have the input after submit of the input\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sign Up  For an Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      error: data === null || data === void 0 ? void 0 : data.authenticateUserWithPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Your Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Your Name\",\n          autoComplete: \"name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"Your Email Addrress\",\n          autoComplete: \"email\",\n          value: inputs.email,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          placeholder: \"Password\",\n          autoComplete: \"password\",\n          value: inputs.password,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Sign In!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 13\n  }, this);\n}","map":{"version":3,"sources":["/home/avinash/Desktop/Projects/TheStore/frontend/components/SignUp.js"],"names":["Form","useForm","useMutation","gql","CURRENT_USER_QUERY","Error","SIGNIN_MUTATION","SignUp","inputs","handleChange","resetForm","email","name","password","signin","data","loading","variables","refetchQueries","query","handleSubmit","e","preventDefault","res","console","log","error","authenticateUserWithPassword","__typename","undefined"],"mappings":"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","sourcesContent":["import Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Error from './ErrorMessage' ; \n\n\nconst SIGNIN_MUTATION = gql`\n    mutation SIGNIN_MUTATION($email:String!, $password:String!){\n        authenticateUserWithPassword(email: $email, password:$password)\n        {\n            ... on UserAuthenticationWithPasswordSuccess {\n            item { \n                id\n                email\n                name\n                }\n            }\n            ... on UserAuthenticationWithPasswordFailure {\n                code\n                message\n            } \n        }\n    }\n`;\n\nexport default function  SignUp(){\n    const {inputs, handleChange , resetForm} = useForm({\n        email:'',\n        name:'',\n        password:''\n    })\n    const [signin, {data, loading}] = useMutation(SIGNIN_MUTATION,{\n            variables: inputs,\n            //Refetch the current logged in user\n            //Using this the navigation changed instantly\n            refetchQueries:[{query:CURRENT_USER_QUERY}]\n        });  \n\n\n    async function handleSubmit(e){\n         e.preventDefault(); //Stop the form from submitting\n         const res = await signin();\n         console.log(res);\n         resetForm();\n         //Send the email and password to the graphQL API\n    }\n    const error = data?.authenticateUserWithPassword.__typename == \n    'UserAuthenticationWithPasswordFailure'\n    ? data?.authenticateUserWithPassword\n    :undefined;\n    //error = response  which is data?.authenticateUserWithPassword but only when __typename == 'UserAuthenticationWithPasswordFailure' then we return \n    //data?.authenticateUserWithPassword which is the error\n\n    //The password is submitted over the network to your server in clear text but then what happens is the server hashes it compares it to what it has in file for its own hash\n    //COncern - We are sending our password in clear text  and \n    // ANd than that's why we use HTTPS    \n\n    // WHat HTTPS does is makes the packets encrypted\n    //Client \n    //--\n    //packets go through \n    //your   wifi router isp  or government\n    //--\n    //Server\n\n\n    //method POST also does't let the url have the input after submit of the input\n    return (<Form onSubmit={handleSubmit}> \n        <h2>Sign Up  For an Account</h2>\n        <Error error={data?.authenticateUserWithPassword}/>\n        <fieldset>\n        <label htmlFor=\"name\">Your Name\n        <input type=\"text\" name=\"name\" placeholder=\"Your Name\" autoComplete=\"name\" value={inputs.name} onChange={handleChange}></input>\n        </label>\n        <label htmlFor=\"email\">Email\n        <input type=\"email\" name=\"email\" placeholder=\"Your Email Addrress\" autoComplete=\"email\" value={inputs.email} onChange={handleChange}></input>\n        </label>\n        <label htmlFor=\"password\">Password\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" autoComplete=\"password\" value={inputs.password} onChange={handleChange}></input>\n        </label>\n        <button type=\"submit\">Sign In!</button>\n        </fieldset>\n    </Form>)\n    }"]},"metadata":{},"sourceType":"module"}