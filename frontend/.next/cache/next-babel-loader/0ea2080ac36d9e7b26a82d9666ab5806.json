{"ast":null,"code":"import _regeneratorRuntime from \"/home/avinash/Desktop/Projects/TheStore/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/avinash/Desktop/Projects/TheStore/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/avinash/Desktop/Projects/TheStore/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/avinash/Desktop/Projects/TheStore/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/avinash/Desktop/Projects/TheStore/frontend/components/RequestReset.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation REQUEST_RESET_MUTATION($email:String!){\\n        sendUserPasswordResetLink(email:$email){\\n            code\\n            message\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Error from './ErrorMessage'; //How password reset works\n//Backend will generate a random token and you are emailed a link with this token\n//and when you try to reset it you pass email new password and this token\n//let me check if this token is in the file for you  and is the same as the token last issued \n\nvar REQUEST_RESET_MUTATION = gql(_templateObject());\nexport default function RequestReset() {\n  _s();\n\n  var _useForm = useForm({\n    email: ''\n  }),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      resetForm = _useForm.resetForm;\n\n  var _useMutation = useMutation(REQUEST_RESET_MUTATION, {\n    variables: inputs //Refetch the current logged in user\n    //Using this the navigation changed instantly\n    //refetchQueries:[{query:CURRENT_USER_QUERY}]\n\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      signup = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      data = _useMutation2$.data,\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  } //method POST also does't let the url have the input after submit of  the input\n\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault(); //Stop the form from submitting\n\n              _context.next = 3;\n              return signup()[\"catch\"](console.error);\n\n            case 3:\n              res = _context.sent;\n              console.log(res);\n              resetForm(); //Send the email and password to the graphQL API\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    method: \"POST\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Request a Password Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), (data === null || data === void 0 ? void 0 : data.sendUserPasswordResetLink) == null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Success! Check your email for a link!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"Your Email Addrress\",\n          autoComplete: \"email\",\n          value: inputs.email,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Request Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 13\n  }, this);\n}\n\n_s(RequestReset, \"rISOPaN3ptV6CBp7Wr41NECH+/s=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = RequestReset;\n\nvar _c;\n\n$RefreshReg$(_c, \"RequestReset\");","map":{"version":3,"sources":["/home/avinash/Desktop/Projects/TheStore/frontend/components/RequestReset.js"],"names":["Form","useForm","useMutation","gql","Error","REQUEST_RESET_MUTATION","RequestReset","email","inputs","handleChange","resetForm","variables","signup","data","loading","error","handleSubmit","e","preventDefault","console","res","log","sendUserPasswordResetLink"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,gBAAlB,C,CAEA;AACA;AACA;AACA;;AAGA,IAAMC,sBAAsB,GAAGF,GAAH,mBAA5B;AASA,eAAe,SAAUG,YAAV,GAAwB;AAAA;;AAAA,iBACQL,OAAO,CAAC;AAC/CM,IAAAA,KAAK,EAAC;AADyC,GAAD,CADf;AAAA,MAC5BC,MAD4B,YAC5BA,MAD4B;AAAA,MACpBC,YADoB,YACpBA,YADoB;AAAA,MACLC,SADK,YACLA,SADK;;AAAA,qBAKKR,WAAW,CAAEG,sBAAF,EAAyB;AACpEM,IAAAA,SAAS,EAAEH,MADyD,CAEpE;AACA;AACA;;AAJoE,GAAzB,CALhB;AAAA;AAAA,MAK5BI,MAL4B;AAAA;AAAA,MAKnBC,IALmB,kBAKnBA,IALmB;AAAA,MAKbC,OALa,kBAKbA,OALa;AAAA,MAKLC,KALK,kBAKLA,KALK;;AAAA,WAapBC,YAboB;AAAA;AAAA,IAsBnC;;;AAtBmC;AAAA,6EAanC,iBAA4BC,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACKA,cAAAA,CAAC,CAACC,cAAF,GADL,CACyB;;AADzB;AAAA,qBAEuBN,MAAM,WAAN,CAAeO,OAAO,CAACJ,KAAvB,CAFvB;;AAAA;AAEWK,cAAAA,GAFX;AAGKD,cAAAA,OAAO,CAACE,GAAR,CAAYD,GAAZ;AACAV,cAAAA,SAAS,GAJd,CAKK;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAbmC;AAAA;AAAA;;AAuBnC,sBAAQ,QAAC,IAAD;AAAM,IAAA,MAAM,EAAC,MAAb;AAAoB,IAAA,QAAQ,EAAEM,YAA9B;AAAA,4BACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADI,EAEH,CAAAH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAES,yBAAN,KAAmC,IAAnC,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHA,eAMJ,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEP;AAAd;AAAA;AAAA;AAAA;AAAA,YANI,eAOJ;AAAA,8BACA;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA,yCACA;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,IAAI,EAAC,OAAzB;AAAiC,UAAA,WAAW,EAAC,qBAA7C;AAAmE,UAAA,YAAY,EAAC,OAAhF;AAAwF,UAAA,KAAK,EAAEP,MAAM,CAACD,KAAtG;AAA6G,UAAA,QAAQ,EAAEE;AAAvH;AAAA;AAAA;AAAA;AAAA,gBADA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAIA;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPI;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAcC;;GArCoBH,Y;UACsBL,O,EAIHC,W;;;KALnBI,Y","sourcesContent":["import Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Error from './ErrorMessage' ; \n\n//How password reset works\n//Backend will generate a random token and you are emailed a link with this token\n//and when you try to reset it you pass email new password and this token\n//let me check if this token is in the file for you  and is the same as the token last issued \n\n\nconst REQUEST_RESET_MUTATION = gql`\n    mutation REQUEST_RESET_MUTATION($email:String!){\n        sendUserPasswordResetLink(email:$email){\n            code\n            message\n        }\n    }\n`; \n\nexport default function  RequestReset(){\n    const {inputs, handleChange , resetForm} = useForm({\n        email:'',\n    });\n\n    const [signup, {data, loading,error}] = useMutation( REQUEST_RESET_MUTATION,{\n            variables: inputs,\n            //Refetch the current logged in user\n            //Using this the navigation changed instantly\n            //refetchQueries:[{query:CURRENT_USER_QUERY}]\n        });  \n\n\n    async function handleSubmit(e){\n         e.preventDefault(); //Stop the form from submitting\n         const res = await signup().catch(console.error);\n         console.log(res);\n         resetForm();\n         //Send the email and password to the graphQL API\n    }\n   \n\n    //method POST also does't let the url have the input after submit of  the input\n    return (<Form method=\"POST\" onSubmit={handleSubmit}> \n        <h2>Request a Password Reset</h2>\n        {data?.sendUserPasswordResetLink == null && \n            <p>\n                Success! Check your email for a link!\n            </p>}\n        <Error error={error}/>\n        <fieldset>\n        <label htmlFor=\"email\">Email\n        <input type=\"email\" name=\"email\" placeholder=\"Your Email Addrress\" autoComplete=\"email\" value={inputs.email} onChange={handleChange}></input>\n        </label>\n        <button type=\"submit\">Request Reset</button>\n        </fieldset>\n    </Form>)\n    }"]},"metadata":{},"sourceType":"module"}