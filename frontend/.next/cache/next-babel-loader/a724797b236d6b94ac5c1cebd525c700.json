{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/avinash/Desktop/Projects/TheStore/frontend/components/Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useLazyQuery } from '@apollo/client';\nimport { resetIdCounter, useCombobox } from 'downshift';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { useRouter } from 'next/dist/client/router';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nconst SEARCH_PRODUCTS_QUERY = gql`\n    query SEARCH_PRODUCTS_QUERY($searchTerm: String!){\n        searchTerms:allProducts(where:{\n            OR: [\n                {name_contains_i:$searchTerm},\n                {description_contains_i:$searchTerm},\n            ] \n        }){\n            id\n            name\n            photo{\n                image{\n                    publicUrlTransformed\n                }\n            }\n        }\n    }\n`;\nexport default function Search() {\n  const router = useRouter(); //We don't want it to fireoff  on component render\n  // WE want it to fire off   whenver we want kind of like mutation but it's a query not a mutation\n  //THat's wy We use lazy Query\n  //Understand by removing this fetchpolicy\n  //Bypass apollo cache and always go to the network we don't want to storing or caching any of the result we just wanna go directly to the network\n  //if we don't go directly to the network it try to pull  it from the cache\n\n  const [findItems, {\n    loading,\n    data,\n    error\n  }] = useLazyQuery(SEARCH_PRODUCTS_QUERY, {\n    fetchPolicy: 'no-cache'\n  });\n  const items = (data === null || data === void 0 ? void 0 : data.searchTerms) || []; //fireoff but don't fireoff that often  that's called debouncing a function\n  //fireoff but holdon for couple of secs and then see maybe if we fired it 6 times within a sec we wait for one sec and only fire it once after it has elapsed\n  //Run only once in a 350 millisecs\n\n  const findItemsButChill = debounce(findItems, 350); //Takes care of server side render issues\n\n  resetIdCounter();\n  const {\n    isOpen,\n    inputValue,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getItemProps,\n    highlightedIndex\n  } = useCombobox({\n    items,\n\n    onInputValueChange() {\n      findItemsButChill({\n        variables: {\n          searchTerm: inputValue\n        }\n      });\n    },\n\n    onSelectedItemChange({\n      selectedItem\n    }) {\n      router.push({\n        pathname: `/product/${selectedItem.id}`\n      });\n    },\n\n    itemToString: item => (item === null || item === void 0 ? void 0 : item.name) || ''\n  });\n  return /*#__PURE__*/_jsxDEV(SearchStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getComboboxProps()), {}, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps({\n        type: 'search',\n        placeholder: 'Search for an item',\n        id: 'search',\n        className: loading ? 'loading' : ''\n      })), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n      children: [isOpen && items.map((item, index) => /*#__PURE__*/_createElement(DropDownItem, _objectSpread(_objectSpread({}, getItemProps({\n        item,\n        index\n      })), {}, {\n        key: item.id,\n        highlighted: index === highlightedIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        },\n        __self: this\n      }), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: item.photo.image.publicUrlTransformed,\n        alt: item.name,\n        width: \"50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), item.name)), isOpen && !items.length && !loading && /*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: [\"Sorry, No items found for \", inputValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/avinash/Desktop/Projects/TheStore/frontend/components/Search.js"],"names":["useLazyQuery","resetIdCounter","useCombobox","gql","debounce","useRouter","DropDown","DropDownItem","SearchStyles","SEARCH_PRODUCTS_QUERY","Search","router","findItems","loading","data","error","fetchPolicy","items","searchTerms","findItemsButChill","isOpen","inputValue","getMenuProps","getInputProps","getComboboxProps","getItemProps","highlightedIndex","onInputValueChange","variables","searchTerm","onSelectedItemChange","selectedItem","push","pathname","id","itemToString","item","name","type","placeholder","className","map","index","photo","image","publicUrlTransformed","length"],"mappings":"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","sourcesContent":["import { useLazyQuery } from '@apollo/client';\nimport { resetIdCounter, useCombobox } from 'downshift';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { useRouter } from 'next/dist/client/router';\nimport {DropDown, DropDownItem, SearchStyles} from './styles/DropDown';\n\nconst SEARCH_PRODUCTS_QUERY = gql`\n    query SEARCH_PRODUCTS_QUERY($searchTerm: String!){\n        searchTerms:allProducts(where:{\n            OR: [\n                {name_contains_i:$searchTerm},\n                {description_contains_i:$searchTerm},\n            ] \n        }){\n            id\n            name\n            photo{\n                image{\n                    publicUrlTransformed\n                }\n            }\n        }\n    }\n`;\n\n\nexport default function Search(){\n    const router = useRouter();\n    \n//We don't want it to fireoff  on component render\n// WE want it to fire off   whenver we want kind of like mutation but it's a query not a mutation\n//THat's wy We use lazy Query\n\n//Understand by removing this fetchpolicy\n//Bypass apollo cache and always go to the network we don't want to storing or caching any of the result we just wanna go directly to the network\n//if we don't go directly to the network it try to pull  it from the cache\n    const [findItems, {loading, data,error}] = useLazyQuery(\n        SEARCH_PRODUCTS_QUERY,\n        {\n            fetchPolicy:'no-cache',\n        }\n    );\n\n    const items = data?.searchTerms || [];\n   //fireoff but don't fireoff that often  that's called debouncing a function\n   //fireoff but holdon for couple of secs and then see maybe if we fired it 6 times within a sec we wait for one sec and only fire it once after it has elapsed\n   //Run only once in a 350 millisecs\n    const findItemsButChill = debounce(findItems,350);\n\n    //Takes care of server side render issues\n    resetIdCounter();\n\n    const {\n        isOpen,\n        inputValue, \n        getMenuProps, \n        getInputProps, \n        getComboboxProps,\n        getItemProps,\n        highlightedIndex\n    } = useCombobox({\n        items,\n        onInputValueChange(){\n            findItemsButChill({\n                variables:{\n                    searchTerm:inputValue,\n                },\n            });\n        },\n        onSelectedItemChange({ selectedItem }) {\n            router.push({\n              pathname: `/product/${selectedItem.id}`,\n            });\n          },\n          itemToString:(item) => item?.name || '',\n    });  \n\n    return (\n    <SearchStyles>\n        <div {...getComboboxProps()}>\n            <input  {...getInputProps({\n                type:'search',\n                placeholder:'Search for an item',\n                id:'search',\n                className:loading ? 'loading':'',\n            })} />\n        </div>\n        <DropDown {...getMenuProps()}>\n            {isOpen && items.map((item,index) =>  (\n            <DropDownItem {...getItemProps({ item,index })} key ={item.id}  highlighted={index === highlightedIndex}> \n                <img src={item.photo.image.publicUrlTransformed}\n                alt ={item.name}\n                width=\"50\"/>\n                {item.name}\n                </DropDownItem>\n            ))}\n            {isOpen && !items.length && !loading && (\n                <DropDownItem>Sorry, No items found for {inputValue}</DropDownItem>\n            )}\n         </DropDown>\n    </SearchStyles>\n    );\n}"]},"metadata":{},"sourceType":"module"}