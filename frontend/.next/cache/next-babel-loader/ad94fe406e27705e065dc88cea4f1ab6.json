{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/avinash/Desktop/Projects/TheStore/frontend/components/SignIn.js\";\nimport Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { gql, useMutation } from '@apollo/client';\nimport { CURRENT_USER_QUERY } from './User';\nconst SIGNIN_MUTATION = gql`\n    mutation SIGNIN_MUTATION($email:String!, $password:String!){\n        authenticateUserWithPassword(email: $email, password:$password)\n        {\n            ... on UserAuthenticationWithPasswordSuccess {\n            item { \n                id\n                email\n                name\n                }\n            }\n            ... on UserAuthenticationWithPasswordFailure {\n            item { \n                id\n                email\n                name\n                }\n            }\n        }\n    }\n`;\nexport default function SignIn() {\n  const {\n    inputs,\n    handleChange,\n    resetForm\n  } = useForm({\n    email: '',\n    password: ''\n  });\n  const [signin, {\n    data,\n    error,\n    loading\n  }] = useMutation(SIGNIN_MUTATION, {\n    variables: inputs,\n    //Refetch the current logged in user\n    //Using this the navigation changed instantly\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n\n  async function handleSubmit(e) {\n    e.preventDefault(); //Stop the form from submitting\n\n    console.log(inputs);\n    const res = await signin(); //Send the email and password to the graphQL API\n  } //The password is submitted over the network to your server in clear text but then what happens is the server hashes it compares it to what it has in file for its own hash\n  //COncern - We are sending our password in clear text  and \n  // ANd than that's why we use HTTPS    \n  // WHat HTTPS does is makes the packets encrypted\n  //Client \n  //--\n  //packets go through \n  //your   wifi router isp  or government\n  //--\n  //Server\n  //method POST also does't let the url have the input after submit of the input\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sign Into Your Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"Your Email Addrress\",\n          autoComplete: \"email\",\n          value: inputs.email,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          placeholder: \"Password\",\n          autoComplete: \"password\",\n          value: inputs.password,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Sign In!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 12\n  }, this);\n}","map":{"version":3,"sources":["/home/avinash/Desktop/Projects/TheStore/frontend/components/SignIn.js"],"names":["Form","useForm","gql","useMutation","CURRENT_USER_QUERY","SIGNIN_MUTATION","SignIn","inputs","handleChange","resetForm","email","password","signin","data","error","loading","variables","refetchQueries","query","handleSubmit","e","preventDefault","console","log","res"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AACA,SAASC,kBAAT,QAAmC,QAAnC;AAEA,MAAMC,eAAe,GAAGH,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;AAsBA,eAAe,SAAUI,MAAV,GAAkB;AAC7B,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,YAAT;AAAwBC,IAAAA;AAAxB,MAAqCR,OAAO,CAAC;AAC/CS,IAAAA,KAAK,EAAC,EADyC;AAE/CC,IAAAA,QAAQ,EAAC;AAFsC,GAAD,CAAlD;AAIA,QAAM,CAACC,MAAD,EAAS;AAACC,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,GAAT,IAAmCZ,WAAW,CAACE,eAAD,EAAiB;AAC7DW,IAAAA,SAAS,EAAET,MADkD;AAE7D;AACA;AACAU,IAAAA,cAAc,EAAC,CAAC;AAACC,MAAAA,KAAK,EAACd;AAAP,KAAD;AAJ8C,GAAjB,CAApD;;AAOA,iBAAee,YAAf,CAA4BC,CAA5B,EAA8B;AACzBA,IAAAA,CAAC,CAACC,cAAF,GADyB,CACL;;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAZ;AACA,UAAMiB,GAAG,GAAG,MAAMZ,MAAM,EAAxB,CAHyB,CAIzB;AAEJ,GAlB4B,CAoB7B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA,sBAAO,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEO,YAAhB;AAAA,4BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,eAEH;AAAA,8BACA;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA,yCACA;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,IAAI,EAAC,OAAzB;AAAiC,UAAA,WAAW,EAAC,qBAA7C;AAAmE,UAAA,YAAY,EAAC,OAAhF;AAAwF,UAAA,KAAK,EAAEZ,MAAM,CAACG,KAAtG;AAA6G,UAAA,QAAQ,EAAEF;AAAvH;AAAA;AAAA;AAAA;AAAA,gBADA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAIA;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA,4CACA;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,IAAI,EAAC,UAA5B;AAAuC,UAAA,WAAW,EAAC,UAAnD;AAA8D,UAAA,YAAY,EAAC,UAA3E;AAAsF,UAAA,KAAK,EAAED,MAAM,CAACI,QAApG;AAA8G,UAAA,QAAQ,EAAEH;AAAxH;AAAA;AAAA;AAAA;AAAA,gBADA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJA,eAOA;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAYC","sourcesContent":["import Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { gql, useMutation } from '@apollo/client';\nimport { CURRENT_USER_QUERY } from './User';\n\nconst SIGNIN_MUTATION = gql`\n    mutation SIGNIN_MUTATION($email:String!, $password:String!){\n        authenticateUserWithPassword(email: $email, password:$password)\n        {\n            ... on UserAuthenticationWithPasswordSuccess {\n            item { \n                id\n                email\n                name\n                }\n            }\n            ... on UserAuthenticationWithPasswordFailure {\n            item { \n                id\n                email\n                name\n                }\n            }\n        }\n    }\n`;\n\nexport default function  SignIn(){\n    const {inputs, handleChange , resetForm} = useForm({\n        email:'',\n        password:''\n    })\n    const [signin, {data, error, loading}] = useMutation(SIGNIN_MUTATION,{\n            variables: inputs,\n            //Refetch the current logged in user\n            //Using this the navigation changed instantly\n            refetchQueries:[{query:CURRENT_USER_QUERY}]\n        });\n\n    async function handleSubmit(e){\n         e.preventDefault(); //Stop the form from submitting\n         console.log(inputs);\n         const res = await signin();\n         //Send the email and password to the graphQL API\n\n    }\n\n    //The password is submitted over the network to your server in clear text but then what happens is the server hashes it compares it to what it has in file for its own hash\n    //COncern - We are sending our password in clear text  and \n    // ANd than that's why we use HTTPS    \n\n    // WHat HTTPS does is makes the packets encrypted\n    //Client \n    //--\n    //packets go through \n    //your   wifi router isp  or government\n    //--\n    //Server\n\n\n    //method POST also does't let the url have the input after submit of the input\n    return <Form onSubmit={handleSubmit}> \n        <h2>Sign Into Your Account</h2>\n        <fieldset>\n        <label htmlFor=\"email\">Email\n        <input type=\"email\" name=\"email\" placeholder=\"Your Email Addrress\" autoComplete=\"email\" value={inputs.email} onChange={handleChange}></input>\n        </label>\n        <label htmlFor=\"password\">Password\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" autoComplete=\"password\" value={inputs.password} onChange={handleChange}></input>\n        </label>\n        <button type=\"submit\">Sign In!</button>\n        </fieldset>\n    </Form>\n    }"]},"metadata":{},"sourceType":"module"}