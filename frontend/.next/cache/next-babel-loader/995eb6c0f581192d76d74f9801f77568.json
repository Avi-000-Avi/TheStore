{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/avinash/Desktop/Projects/TheStore/frontend/components/UpdateProduct.js\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport useForm from \"../lib/useForm\";\nimport DisplayError from \"./ErrorMessage\";\nimport Form from \"./styles/Form\";\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id:ID!){\n        Product(where: {id:$id}){\n            id\n            name\n            description\n            price\n        }\n    }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION (\n            $id:ID!\n            $name:String\n            $description:String\n            $price:Int\n        ){\n            UpdateProduct(\n                id:$id,\n                data:{\n                    id:$id,name: $name,description:$description,price:$price\n                }\n            )\n                {\n                  id\n                  name\n                  description\n                  price\n                }\n        }\n`;\nexport default function UpdateProduct({\n  id\n}) {\n  //We need to get the existing product\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  });\n  console.log(data); // We need to get the mutation to update the product\n\n  const [updateProduct, {\n    data: updateData,\n    error: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id //TODO: Pass in updates to product here!\n\n    }\n  }); //Create State for form inputs\n\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm(data === null || data === void 0 ? void 0 : data.Product);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading. . .\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 24\n  }, this); //We need the form to handle the updates \n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: async e => {\n      e.preventDefault();\n      const res = updateProduct(); // Submit the inputfields to the backend:\n    },\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/avinash/Desktop/Projects/TheStore/frontend/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","useForm","DisplayError","Form","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","error","loading","variables","console","log","updateProduct","updateData","updateError","updateLoading","inputs","handleChange","clearForm","resetForm","Product","e","preventDefault","res","name","price","description"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport useForm from \"../lib/useForm\";\nimport DisplayError from \"./ErrorMessage\";\nimport Form from \"./styles/Form\";\n\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id:ID!){\n        Product(where: {id:$id}){\n            id\n            name\n            description\n            price\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION (\n            $id:ID!\n            $name:String\n            $description:String\n            $price:Int\n        ){\n            UpdateProduct(\n                id:$id,\n                data:{\n                    id:$id,name: $name,description:$description,price:$price\n                }\n            )\n                {\n                  id\n                  name\n                  description\n                  price\n                }\n        }\n`;\n\n\nexport default function UpdateProduct({id}){\n    //We need to get the existing product\n    const {data,error,loading} = useQuery(SINGLE_PRODUCT_QUERY,{\n        variables:{id},\n    });\n\n    console.log(data);\n    // We need to get the mutation to update the product\n    const [updateProduct, {data:updateData,error:updateError,loading:updateLoading}]= useMutation(UPDATE_PRODUCT_MUTATION,{\n        variables:{\n            id:id\n            //TODO: Pass in updates to product here!\n        }\n    })\n\n\n    //Create State for form inputs\n    const { inputs, handleChange, clearForm, resetForm } = useForm(data?.Product); \n\n    if(loading) return <p>loading. . .</p>\n\n    //We need the form to handle the updates \n    return (\n        <Form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            const res = updateProduct();\n            // Submit the inputfields to the backend:\n            \n          }}\n        >\n          <DisplayError error={error || updateError} />\n          <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n            \n            <label htmlFor=\"name\">\n              Name\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Name\"\n                value={inputs.name}\n                onChange={handleChange}\n              />\n            </label>\n            <label htmlFor=\"price\">\n              Price\n              <input\n                type=\"number\"\n                id=\"price\"\n                name=\"price\"\n                placeholder=\"price\"\n                value={inputs.price}\n                onChange={handleChange}\n              />\n            </label>\n            <label htmlFor=\"description\">\n              Description\n              <textarea\n                id=\"description\"\n                name=\"description\"\n                placeholder=\"Description\"\n                value={inputs.description}\n                onChange={handleChange}\n              />\n            </label>\n    \n            <button type=\"submit\">Update Product</button>\n          </fieldset>\n        </Form>\n      );\n    }\n"]},"metadata":{},"sourceType":"module"}