{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nexport default function useForm(initial = {}) {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n\n  function handleChange(e) {\n    const {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      value[0] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.entries(inputs).map(([key, value]) => [key, '']);\n  }\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}","map":{"version":3,"sources":["/home/avinash/Desktop/Projects/TheStore/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","value","name","type","target","parseInt","files","resetForm","clearForm","blankState","Object","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA8B;AAEzC,QAAM;AAAA,OAACC,MAAD;AAAA,OAAQC;AAAR,MAAqBJ,QAAQ,CAACE,OAAD,CAAnC;;AAGA,WAASG,YAAT,CAAsBC,CAAtB,EAAwB;AACpB,UAAM;AAACC,MAAAA,KAAD;AAAOC,MAAAA,IAAP;AAAYC,MAAAA;AAAZ,QAAoBH,CAAC,CAACI,MAA5B;;AAEA,QAAGD,IAAI,KAAM,QAAb,EAAsB;AAClBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACH;;AAED,QAAGE,IAAI,KAAI,MAAX,EAAkB;AACdF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,CAAC,CAACI,MAAF,CAASE,KAApB;AACH;;AAEDR,IAAAA,SAAS,iCAEFD,MAFE;AAGL,OAACK,IAAD,GAAOD;AAHF,OAAT;AAMH;;AAGD,WAASM,SAAT,GAAoB;AAChBT,IAAAA,SAAS,CAACF,OAAD,CAAT;AACH;;AAED,WAASY,SAAT,GAAoB;AAChB,UAAMC,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAed,MAAf,EAAuBe,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAKZ,KAAL,CAAD,KAAiB,CAACY,GAAD,EAAK,EAAL,CAA5C,CAAnB;AACH;;AAGD,SAAO;AACHhB,IAAAA,MADG;AAEHE,IAAAA,YAFG;AAGHQ,IAAAA,SAHG;AAIHC,IAAAA;AAJG,GAAP;AAMH","sourcesContent":["import { useState } from \"react\";\n\nexport default function useForm(initial = {}){\n\n    const [inputs,setInputs] = useState(initial);\n\n\n    function handleChange(e){\n        const {value,name,type} = e.target;\n\n        if(type ===  'number'){\n            value = parseInt(value);\n        }\n\n        if(type=== 'file'){\n            value[0] = e.target.files;\n        }\n\n        setInputs({\n            //Copy the existing state\n            ...inputs,\n            [name]:value,\n\n        });\n    }\n\n\n    function resetForm(){\n        setInputs(initial);\n    }\n\n    function clearForm(){\n        const blankState = Object.entries(inputs).map(([key,value]) => [key,'']);\n    }\n\n\n    return {\n        inputs,\n        handleChange,\n        resetForm,\n        clearForm,\n    };\n}"]},"metadata":{},"sourceType":"module"}