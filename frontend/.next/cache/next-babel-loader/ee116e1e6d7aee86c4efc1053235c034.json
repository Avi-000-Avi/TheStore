{"ast":null,"code":"import _regeneratorRuntime from \"/home/avinash/Desktop/Projects/TheStore/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/avinash/Desktop/Projects/TheStore/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/avinash/Desktop/Projects/TheStore/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/avinash/Desktop/Projects/TheStore/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/avinash/Desktop/Projects/TheStore/frontend/components/Reset.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation RESET_MUTATION($email: String!,$password:String! ,$token:String!) {\\n    redeemUserPasswordResetToken(email: $email, token:$token, password:$password) {\\n      code\\n      message\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Error from './ErrorMessage'; //How password reset works\n//Backend will generate a random token and you are emailed a link with this token\n//and when you try to reset it you pass email new password and this token\n//let me check if this token is in the file for you  and is the same as the token last issued \n\nvar RESET_MUTATION = gql(_templateObject());\nexport default function Reset(_ref) {\n  _s();\n\n  var _data$redeemUserPassw;\n\n  var token = _ref.token;\n\n  var _useForm = useForm({\n    email: '',\n    password: '',\n    token: token\n  }),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      resetForm = _useForm.resetForm;\n\n  var _useMutation = useMutation(RESET_MUTATION, {\n    variables: inputs\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      reset = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      data = _useMutation2$.data,\n      loading = _useMutation2$.loading;\n\n  var error = (data === null || data === void 0 ? void 0 : (_data$redeemUserPassw = data.redeemUserPasswordResetToken) === null || _data$redeemUserPassw === void 0 ? void 0 : _data$redeemUserPassw.code) ? data === null || data === void 0 ? void 0 : data.redeemUserPasswordResetToken : undefined;\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault(); // stop the form from submitting\n\n              console.log(inputs);\n              _context.next = 4;\n              return reset()[\"catch\"](console.error);\n\n            case 4:\n              res = _context.sent;\n              console.log(res);\n              console.log({\n                data: data,\n                loading: loading,\n                error: error\n              });\n              resetForm(); // Send the email and password to the graphqlAPI\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    method: \"POST\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Your Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [(data === null || data === void 0 ? void 0 : data.redeemUserPasswordResetToken) === null && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Success! You can now sign in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"Your Email Address\",\n          autoComplete: \"email\",\n          value: inputs.email,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            name: \"password\",\n            placeholder: \"Password\",\n            autoComplete: \"password\",\n            value: inputs.password,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Request Reset!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Reset, \"alDvxMuZNB4mp77alRXABwWf3Ek=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = Reset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reset\");","map":{"version":3,"sources":["/home/avinash/Desktop/Projects/TheStore/frontend/components/Reset.js"],"names":["Form","useForm","useMutation","gql","Error","RESET_MUTATION","Reset","token","email","password","inputs","handleChange","resetForm","variables","reset","data","loading","error","redeemUserPasswordResetToken","code","undefined","handleSubmit","e","preventDefault","console","log","res"],"mappings":"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","sourcesContent":["import Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Error from './ErrorMessage' ; \n\n//How password reset works\n//Backend will generate a random token and you are emailed a link with this token\n//and when you try to reset it you pass email new password and this token\n//let me check if this token is in the file for you  and is the same as the token last issued \n\n\nconst RESET_MUTATION = gql`\n  mutation RESET_MUTATION($email: String!,$password:String! ,$token:String!) {\n    redeemUserPasswordResetToken(email: $email, token:$token, password:$password) {\n      code\n      message\n    }\n  }\n`;\n\nexport default function Reset({token}) {\n  const { inputs, handleChange, resetForm } = useForm({\n    email: '',\n    password:'',\n    token:token\n  });\n  const [reset, { data, loading }] = useMutation(\n    RESET_MUTATION,\n    {\n      variables: inputs,\n    }\n  );\n\n  const error = data?.redeemUserPasswordResetToken?.code ?\n    data?.redeemUserPasswordResetToken:undefined;\n \n    async function handleSubmit(e) {\n    e.preventDefault(); // stop the form from submitting\n    console.log(inputs);\n    const res = await reset().catch(console.error);\n    console.log(res);\n    console.log({ data, loading, error });\n    resetForm();\n    // Send the email and password to the graphqlAPI\n  }\n  return (\n    <Form method=\"POST\" onSubmit={handleSubmit}>\n      <h2>Reset Your Password</h2>\n      <Error error={error} />\n      <fieldset>\n        {data?.redeemUserPasswordResetToken === null && (\n          <p>Success! You can now sign in.</p>\n        )}\n\n        <label htmlFor=\"email\">\n          Email\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Your Email Address\"\n            autoComplete=\"email\"\n            value={inputs.email}\n            onChange={handleChange}\n          />\n          <label htmlFor=\"password\">Password\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" autoComplete=\"password\" value={inputs.password} onChange={handleChange}></input>\n        </label>\n        </label>\n        <button type=\"submit\">Request Reset!</button>\n      </fieldset>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}