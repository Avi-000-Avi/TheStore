{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/avinash/Desktop/Projects/TheStore/frontend/components/UpdateProduct.js\";\nimport { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport useForm from '../lib/useForm';\nimport DisplayError from './ErrorMessage';\nimport Form from './styles/Form';\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id:ID!){\n        Product(where: {id:$id}){\n            id\n            name\n            description\n            price\n        }\n    }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION (\n            $id:ID!\n            $name:String\n            $description:String\n            $price:Int\n        ){\n            updateProduct(\n                id:$id,\n                data:{\n                    name: $name,description:$description,price:$price\n                }\n            )\n                {\n                  id\n                  name\n                  description\n                  price\n                }\n        }\n`;\nexport default function UpdateProduct({\n  id\n}) {\n  //We need to get the existing product\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  }); // We need to get the mutation to update the product\n\n  const [updateProduct, {\n    data: updateData,\n    error: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_PRODUCT_MUTATION); //Create State for form inputs\n\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm(data === null || data === void 0 ? void 0 : data.Product);\n  console.log(inputs);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading. . .\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 24\n  }, this); //We need the form to handle the updates \n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: async e => {\n      e.preventDefault();\n      const res = await updateProduct({\n        variables: {\n          id: id,\n          name: inputs.name,\n          description: inputs.description,\n          price: inputs.price\n        }\n      }).catch(console.log(error));\n      console.log(res); // Submit the inputfields to the backend:\n    },\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/avinash/Desktop/Projects/TheStore/frontend/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","useForm","DisplayError","Form","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","error","loading","variables","updateProduct","updateData","updateError","updateLoading","inputs","handleChange","clearForm","resetForm","Product","console","log","e","preventDefault","res","name","description","price","catch"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport useForm from '../lib/useForm';\nimport DisplayError from './ErrorMessage';\nimport Form from './styles/Form';\n\n\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id:ID!){\n        Product(where: {id:$id}){\n            id\n            name\n            description\n            price\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION (\n            $id:ID!\n            $name:String\n            $description:String\n            $price:Int\n        ){\n            updateProduct(\n                id:$id,\n                data:{\n                    name: $name,description:$description,price:$price\n                }\n            )\n                {\n                  id\n                  name\n                  description\n                  price\n                }\n        }\n`;\n\n\nexport default function UpdateProduct({id}){\n    //We need to get the existing product\n    const {data,error,loading} = useQuery(SINGLE_PRODUCT_QUERY,{\n        variables:{id},\n    });\n\n    // We need to get the mutation to update the product\n    const [updateProduct, {data:updateData,error:updateError,loading:updateLoading}]= useMutation(UPDATE_PRODUCT_MUTATION);\n\n    //Create State for form inputs\n    const { inputs, handleChange, clearForm, resetForm } = useForm(data?.Product); \n    console.log(inputs);\n    if(loading) return <p>loading. . .</p>\n\n    //We need the form to handle the updates \n    return (\n        <Form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            const res = await updateProduct({\n                    variables:{\n                        id:id,\n                        name:inputs.name,\n                        description:inputs.description,\n                        price:inputs.price,\n                    }\n            }).catch(console.log(error)); \n            console.log(res);\n            // Submit the inputfields to the backend:\n          }}\n        >\n          <DisplayError error={error || updateError} />\n          <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n            \n            <label htmlFor=\"name\">\n              Name\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Name\"\n                value={inputs.name}\n                onChange={handleChange}\n              />\n            </label>\n            <label htmlFor=\"price\">\n              Price\n              <input\n                type=\"number\"\n                id=\"price\"\n                name=\"price\"\n                placeholder=\"price\"\n                value={inputs.price}\n                onChange={handleChange}\n              />\n            </label>\n            <label htmlFor=\"description\">\n              Description\n              <textarea\n                id=\"description\"\n                name=\"description\"\n                placeholder=\"Description\"\n                value={inputs.description}\n                onChange={handleChange}\n              />\n            </label>\n    \n            <button type=\"submit\">Update Product</button>\n          </fieldset>\n        </Form>\n      );\n    }\n"]},"metadata":{},"sourceType":"module"}