{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/avinash/Desktop/Projects/TheStore/frontend/components/Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useLazyQuery } from '@apollo/client';\nimport { resetIdCounter, useCombobox } from 'downshift';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nconst SEARCH_PRODUCTS_QUERY = gql`\n    query SEARCH_PRODUCTS_QUERY($searchTerm: String!){\n        searchTerms:allProducts(where:{\n            OR: [\n                {name_contains_i:$searchTerm},\n                {description_contains_i:$searchTerm},\n            ] \n        }){\n            id\n            name\n            photo{\n                image{\n                    publicUrlTransformed\n                }\n            }\n        }\n    }\n`; //We don't want it to fireoff  on component render\n// WE want it to fire off   whenver we want kind of like mutation but it's a query\n//We use lazy Query\n//Bypass apollo client and always go to the network we don't want to storing or caching any of the result we just wanna go directly to the network\n//if we don't go directly to the network it try to pull  it from the cache\n\nexport default function Search() {\n  const [findItems, {\n    loading,\n    data,\n    error\n  }] = useLazyQuery(SEARCH_PRODUCTS_QUERY, {\n    fetchPolicy: 'no-cache'\n  });\n  const items = (data === null || data === void 0 ? void 0 : data.searchTerms) || [];\n  const findItemsButChill = debounce(findItems, 350);\n  resetIdCounter();\n  const {\n    inputValue,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getItemProps\n  } = useCombobox({\n    items: [],\n\n    onInputValueChange() {\n      console.log('Input Change!');\n      findItemsButChill({\n        variables: {\n          searchTerm: inputValue\n        }\n      });\n    },\n\n    onSelectedItemChange() {\n      console.log('Selected item change');\n    }\n\n  });\n  return /*#__PURE__*/_jsxDEV(SearchStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getComboboxProps()), {}, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps({\n        type: 'search',\n        placeholder: 'Search for an item',\n        id: 'search',\n        className: loading ? 'loading' : ''\n      })), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.photo.image.publicUrlTransformed,\n          alt: item.name,\n          width: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), item.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this))\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 12\n  }, this);\n}","map":{"version":3,"sources":["/home/avinash/Desktop/Projects/TheStore/frontend/components/Search.js"],"names":["useLazyQuery","resetIdCounter","useCombobox","gql","debounce","DropDown","DropDownItem","SearchStyles","SEARCH_PRODUCTS_QUERY","Search","findItems","loading","data","error","fetchPolicy","items","searchTerms","findItemsButChill","inputValue","getMenuProps","getInputProps","getComboboxProps","getItemProps","onInputValueChange","console","log","variables","searchTerm","onSelectedItemChange","type","placeholder","id","className","map","item","photo","image","publicUrlTransformed","name"],"mappings":";;;;;;;;;AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,WAA5C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAAQC,QAAR,EAAkBC,YAAlB,EAAgCC,YAAhC,QAAmD,mBAAnD;AAEA,MAAMC,qBAAqB,GAAGL,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA,C,CAoBA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASM,MAAT,GAAiB;AAC5B,QAAM,CAACC,SAAD,EAAY;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAeC,IAAAA;AAAf,GAAZ,IAAqCb,YAAY,CACnDQ,qBADmD,EAEnD;AACIM,IAAAA,WAAW,EAAC;AADhB,GAFmD,CAAvD;AAOA,QAAMC,KAAK,GAAG,CAAAH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEI,WAAN,KAAqB,EAAnC;AACA,QAAMC,iBAAiB,GAAGb,QAAQ,CAACM,SAAD,EAAW,GAAX,CAAlC;AAEAT,EAAAA,cAAc;AACd,QAAM;AAACiB,IAAAA,UAAD;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,aAA3B;AAA0CC,IAAAA,gBAA1C;AAA2DC,IAAAA;AAA3D,MAA2EpB,WAAW,CAAC;AACzFa,IAAAA,KAAK,EAAE,EADkF;;AAEzFQ,IAAAA,kBAAkB,GAAE;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAR,MAAAA,iBAAiB,CAAC;AACdS,QAAAA,SAAS,EAAC;AACNC,UAAAA,UAAU,EAACT;AADL;AADI,OAAD,CAAjB;AAKH,KATwF;;AAUzFU,IAAAA,oBAAoB,GAAE;AAClBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AAZwF,GAAD,CAA5F;AAeA,sBAAO,QAAC,YAAD;AAAA,4BACH,+CAASJ,gBAAgB,EAAzB;AAAA,6BACI,mCAAYD,aAAa,CAAC;AACtBS,QAAAA,IAAI,EAAC,QADiB;AAEtBC,QAAAA,WAAW,EAAC,oBAFU;AAGtBC,QAAAA,EAAE,EAAC,QAHmB;AAItBC,QAAAA,SAAS,EAACrB,OAAO,GAAG,SAAH,GAAa;AAJR,OAAD,CAAzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADG,eASH,QAAC,QAAD,kCAAcQ,YAAY,EAA1B;AAAA,gBACKJ,KAAK,CAACkB,GAAN,CAAUC,IAAI,iBACf,QAAC,YAAD;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACC,KAAL,CAAWC,KAAX,CAAiBC,oBAA3B;AACA,UAAA,GAAG,EAAGH,IAAI,CAACI,IADX;AAEA,UAAA,KAAK,EAAC;AAFN;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIKJ,IAAI,CAACI,IAJV;AAAA;AAAA;AAAA;AAAA;AAAA,cADC;AADL;AAAA;AAAA;AAAA;AAAA,YATG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAoBH","sourcesContent":["import { useLazyQuery } from '@apollo/client';\nimport { resetIdCounter, useCombobox } from 'downshift';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport {DropDown, DropDownItem, SearchStyles} from './styles/DropDown';\n\nconst SEARCH_PRODUCTS_QUERY = gql`\n    query SEARCH_PRODUCTS_QUERY($searchTerm: String!){\n        searchTerms:allProducts(where:{\n            OR: [\n                {name_contains_i:$searchTerm},\n                {description_contains_i:$searchTerm},\n            ] \n        }){\n            id\n            name\n            photo{\n                image{\n                    publicUrlTransformed\n                }\n            }\n        }\n    }\n`;\n\n\n//We don't want it to fireoff  on component render\n// WE want it to fire off   whenver we want kind of like mutation but it's a query\n//We use lazy Query\n//Bypass apollo client and always go to the network we don't want to storing or caching any of the result we just wanna go directly to the network\n//if we don't go directly to the network it try to pull  it from the cache\nexport default function Search(){\n    const [findItems, {loading, data,error}] = useLazyQuery(\n        SEARCH_PRODUCTS_QUERY,\n        {\n            fetchPolicy:'no-cache',\n        }\n    );\n\n    const items = data?.searchTerms || [];\n    const findItemsButChill = debounce(findItems,350);\n\n    resetIdCounter();\n    const {inputValue, getMenuProps, getInputProps, getComboboxProps,getItemProps} = useCombobox({\n        items: [],\n        onInputValueChange(){\n            console.log('Input Change!');\n            findItemsButChill({\n                variables:{\n                    searchTerm:inputValue,\n                }\n            });\n        },\n        onSelectedItemChange(){\n            console.log('Selected item change');\n        }\n    })  \n\n    return <SearchStyles>\n        <div {...getComboboxProps()}>\n            <input  {...getInputProps({\n                type:'search',\n                placeholder:'Search for an item',\n                id:'search',\n                className:loading ? 'loading':'',\n            })} />\n        </div>\n        <DropDown {...getMenuProps()}>\n            {items.map(item =>  (\n            <DropDownItem>\n                <img src={item.photo.image.publicUrlTransformed}\n                alt ={item.name}\n                width=\"50\"/>\n                {item.name}\n                </DropDownItem>\n            ))}\n         </DropDown>\n    </SearchStyles>\n}"]},"metadata":{},"sourceType":"module"}